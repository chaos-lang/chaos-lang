/* lex_tables.h
   author: Simon Lovell Bart (microchips-n-dip)
   description: A header file containing the lexer state tables.
                This is separate for code readability and maintainability.
   date: 2019-06-15
   */

/* Table of equivalence classes. */

enum equivalence_classes {
  EQCLASS_OTHER,
  EQCLASS_WHITESPACE,
  EQCLASS_NEWLINE,
  EQCLASS_LETTER,
  EQCLASS_NUMBER,
  EQCLASS_EQUALS,
  EQCLASS_COLON,
  EQCLASS_MINUS,
  EQCLASS_DOT,
  EQCLASS_GT,
  EQCLASS_OPERATOR,
  EQCLASS_TICK,
  EQCLASS_LENGTH
};

static const char
equivalence_class[256] = {
  [' ']         = EQCLASS_WHITESPACE,
  ['\t']        = EQCLASS_WHITESPACE,
  ['\n']        = EQCLASS_NEWLINE,
  ['_']         = EQCLASS_LETTER, /* Consider '_' a letter. */
  ['A' ... 'Z'] = EQCLASS_LETTER,
  ['a' ... 'z'] = EQCLASS_LETTER,
  ['0' ... '9'] = EQCLASS_NUMBER,
  ['=']         = EQCLASS_EQUALS,
  [':']         = EQCLASS_COLON,
  ['+']         = EQCLASS_OPERATOR,
  ['-']         = EQCLASS_MINUS,
  ['*']         = EQCLASS_OPERATOR,
  ['/']         = EQCLASS_OPERATOR,
  ['.']         = EQCLASS_DOT,
  ['>']         = EQCLASS_GT,
  ['<']         = EQCLASS_OPERATOR
};

enum lexer_state {
  LS_START = 0,
  LS_WHITESPACE,   /* Whitespace, to be skipped. */
  LS_NEWLINE,
  /* Normal textual lexing. */
  LS_IDENT,
  LS_NUMBER,
  LS_STRING,
  LS_CHAR,
  /* Operator lexing states. */
  /* Single char operators. */
  LS_SEEN_EQUALS,   /* "=" */
  LS_SEEN_COLON,    /* ":" */
  LS_SEEN_MINUS,    /* "-" */
  LS_SEEN_RARROW,   /* "->" */
  LS_SEEN_IMPURE,   /* "=>" */
  LS_SEEN_DOT,      /* "." */
  LS_SEEN_DOT_2,    /* ".." */
  /* Triple char operators. */
  LS_SEEN_DOT_3,    /* "..." */
  LS_OPERATOR,      /* Generic operator. */
  LS_SEEN_TICK,     /* "'" */
  LS_NONTERMINALS_END,
  LS_OTHER_TERMINAL = LS_NONTERMINALS_END,
  LS_NEWLINE_TERMINAL,
  LS_IDENT_TERMINAL,
  LS_NUMBER_TERMINAL,
  LS_EQUALS_TERMINAL,
  LS_COLON_TERMINAL,
  LS_RARROW_TERMINAL,
  LS_IMPURE_TERMINAL,
  LS_ELLIPSIS_TERMINAL,
  LS_OPERATOR_TERMINAL,
  LS_TERMINALS_END
};

/* State machine transitions table. */

static const signed char
transitions[LS_NONTERMINALS_END][EQCLASS_LENGTH] = {
  /* Initial transitions. */
  [LS_START][EQCLASS_OTHER]            = LS_OTHER_TERMINAL,
  [LS_START][EQCLASS_WHITESPACE]       = LS_WHITESPACE,
  [LS_START][EQCLASS_NEWLINE]          = LS_NEWLINE,
  [LS_START][EQCLASS_LETTER]           = LS_IDENT,
  [LS_START][EQCLASS_NUMBER]           = LS_NUMBER,
  [LS_START][EQCLASS_EQUALS]           = LS_SEEN_EQUALS,
  [LS_START][EQCLASS_COLON]            = LS_SEEN_COLON,
  [LS_START][EQCLASS_MINUS]            = LS_SEEN_MINUS,
  [LS_START][EQCLASS_DOT]              = LS_SEEN_DOT,
  [LS_START][EQCLASS_GT]               = LS_OPERATOR,
  [LS_START][EQCLASS_OPERATOR]         = LS_OPERATOR,
  [LS_START][EQCLASS_TICK]             = LS_SEEN_TICK,
  /* Whitespace transitions. */
  [LS_WHITESPACE][EQCLASS_OTHER]       = LS_OTHER_TERMINAL,
  [LS_WHITESPACE][EQCLASS_WHITESPACE]  = LS_WHITESPACE,
  [LS_WHITESPACE][EQCLASS_NEWLINE]     = LS_WHITESPACE,
  [LS_WHITESPACE][EQCLASS_LETTER]      = LS_IDENT,
  [LS_WHITESPACE][EQCLASS_NUMBER]      = LS_NUMBER,
  [LS_WHITESPACE][EQCLASS_EQUALS]      = LS_SEEN_EQUALS,
  [LS_WHITESPACE][EQCLASS_COLON]       = LS_SEEN_COLON,
  [LS_WHITESPACE][EQCLASS_MINUS]       = LS_SEEN_MINUS,
  [LS_WHITESPACE][EQCLASS_DOT]         = LS_SEEN_DOT,
  [LS_WHITESPACE][EQCLASS_GT]          = LS_OPERATOR,
  [LS_WHITESPACE][EQCLASS_OPERATOR]    = LS_OPERATOR,
  [LS_NEWLINE][EQCLASS_OTHER]          = LS_NEWLINE_TERMINAL,
  [LS_NEWLINE][EQCLASS_WHITESPACE]     = LS_NEWLINE,
  [LS_NEWLINE][EQCLASS_NEWLINE]        = LS_NEWLINE,
  [LS_NEWLINE][EQCLASS_LETTER]         = LS_NEWLINE_TERMINAL,
  [LS_NEWLINE][EQCLASS_NUMBER]         = LS_NEWLINE_TERMINAL,
  [LS_NEWLINE][EQCLASS_EQUALS]         = LS_NEWLINE_TERMINAL,
  [LS_NEWLINE][EQCLASS_COLON]          = LS_NEWLINE_TERMINAL,
  [LS_NEWLINE][EQCLASS_MINUS]          = LS_NEWLINE_TERMINAL,
  [LS_NEWLINE][EQCLASS_DOT]            = LS_NEWLINE_TERMINAL,
  [LS_NEWLINE][EQCLASS_GT]             = LS_NEWLINE_TERMINAL,
  [LS_NEWLINE][EQCLASS_OPERATOR]       = LS_NEWLINE_TERMINAL,
  /* Normal textual transitions. */
  [LS_IDENT][EQCLASS_OTHER]            = LS_IDENT_TERMINAL,
  [LS_IDENT][EQCLASS_WHITESPACE]       = LS_IDENT_TERMINAL,
  [LS_IDENT][EQCLASS_NEWLINE]          = LS_IDENT_TERMINAL,
  [LS_IDENT][EQCLASS_LETTER]           = LS_IDENT,
  [LS_IDENT][EQCLASS_NUMBER]           = LS_IDENT,
  [LS_IDENT][EQCLASS_EQUALS]           = LS_IDENT_TERMINAL,
  [LS_IDENT][EQCLASS_COLON]            = LS_IDENT_TERMINAL,
  [LS_IDENT][EQCLASS_MINUS]            = LS_IDENT_TERMINAL,
  [LS_IDENT][EQCLASS_DOT]              = LS_IDENT_TERMINAL,
  [LS_IDENT][EQCLASS_GT]               = LS_IDENT_TERMINAL,
  [LS_IDENT][EQCLASS_OPERATOR]         = LS_IDENT_TERMINAL,
  [LS_IDENT][EQCLASS_TICK]             = LS_IDENT_TERMINAL,
  [LS_NUMBER][EQCLASS_OTHER]           = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_WHITESPACE]      = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_NEWLINE]         = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_LETTER]          = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_NUMBER]          = LS_NUMBER,
  [LS_NUMBER][EQCLASS_EQUALS]          = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_COLON]           = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_MINUS]           = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_DOT]             = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_GT]              = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_OPERATOR]        = LS_NUMBER_TERMINAL,
  [LS_NUMBER][EQCLASS_TICK]            = LS_NUMBER_TERMINAL,
  /* TODO: Strings and chars. */
  /* Operator transitions. */
  [LS_SEEN_EQUALS][EQCLASS_OTHER]      = LS_EQUALS_TERMINAL,
  [LS_SEEN_EQUALS][EQCLASS_WHITESPACE] = LS_EQUALS_TERMINAL,
  [LS_SEEN_EQUALS][EQCLASS_NEWLINE]    = LS_EQUALS_TERMINAL,
  [LS_SEEN_EQUALS][EQCLASS_LETTER]     = LS_EQUALS_TERMINAL,
  [LS_SEEN_EQUALS][EQCLASS_NUMBER]     = LS_EQUALS_TERMINAL,
  [LS_SEEN_EQUALS][EQCLASS_EQUALS]     = LS_OPERATOR,
  [LS_SEEN_EQUALS][EQCLASS_COLON]      = LS_OPERATOR,
  [LS_SEEN_EQUALS][EQCLASS_MINUS]      = LS_OPERATOR,
  [LS_SEEN_EQUALS][EQCLASS_DOT]        = LS_OPERATOR,
  [LS_SEEN_EQUALS][EQCLASS_GT]         = LS_SEEN_IMPURE,
  [LS_SEEN_EQUALS][EQCLASS_OPERATOR]   = LS_OPERATOR,
  [LS_SEEN_COLON][EQCLASS_OTHER]       = LS_COLON_TERMINAL,
  [LS_SEEN_COLON][EQCLASS_WHITESPACE]  = LS_COLON_TERMINAL,
  [LS_SEEN_COLON][EQCLASS_NEWLINE]     = LS_COLON_TERMINAL,
  [LS_SEEN_COLON][EQCLASS_LETTER]      = LS_COLON_TERMINAL,
  [LS_SEEN_COLON][EQCLASS_NUMBER]      = LS_COLON_TERMINAL,
  [LS_SEEN_COLON][EQCLASS_EQUALS]      = LS_OPERATOR,
  [LS_SEEN_COLON][EQCLASS_COLON]       = LS_OPERATOR,
  [LS_SEEN_COLON][EQCLASS_MINUS]       = LS_OPERATOR,
  [LS_SEEN_COLON][EQCLASS_DOT]         = LS_OPERATOR,
  [LS_SEEN_COLON][EQCLASS_GT]          = LS_OPERATOR,
  [LS_SEEN_COLON][EQCLASS_OPERATOR]    = LS_OPERATOR,
  [LS_SEEN_MINUS][EQCLASS_OTHER]       = LS_OPERATOR_TERMINAL,
  [LS_SEEN_MINUS][EQCLASS_WHITESPACE]  = LS_OPERATOR_TERMINAL,
  [LS_SEEN_MINUS][EQCLASS_NEWLINE]     = LS_OPERATOR_TERMINAL,
  [LS_SEEN_MINUS][EQCLASS_LETTER]      = LS_OPERATOR_TERMINAL,
  [LS_SEEN_MINUS][EQCLASS_NUMBER]      = LS_OPERATOR_TERMINAL,
  [LS_SEEN_MINUS][EQCLASS_EQUALS]      = LS_OPERATOR,
  [LS_SEEN_MINUS][EQCLASS_COLON]       = LS_OPERATOR,
  [LS_SEEN_MINUS][EQCLASS_MINUS]       = LS_OPERATOR,
  [LS_SEEN_MINUS][EQCLASS_DOT]         = LS_OPERATOR,
  [LS_SEEN_MINUS][EQCLASS_GT]          = LS_SEEN_RARROW,
  [LS_SEEN_MINUS][EQCLASS_OPERATOR]    = LS_OPERATOR,
  [LS_SEEN_DOT][EQCLASS_OTHER]         = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT][EQCLASS_WHITESPACE]    = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT][EQCLASS_NEWLINE]       = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT][EQCLASS_LETTER]        = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT][EQCLASS_NUMBER]        = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT][EQCLASS_EQUALS]        = LS_OPERATOR,
  [LS_SEEN_DOT][EQCLASS_COLON]         = LS_OPERATOR,
  [LS_SEEN_DOT][EQCLASS_MINUS]         = LS_OPERATOR,
  [LS_SEEN_DOT][EQCLASS_DOT]           = LS_SEEN_DOT_2,
  [LS_SEEN_DOT][EQCLASS_GT]            = LS_OPERATOR,
  [LS_SEEN_DOT][EQCLASS_OPERATOR]      = LS_OPERATOR,
  [LS_SEEN_RARROW][EQCLASS_OTHER]      = LS_RARROW_TERMINAL,
  [LS_SEEN_RARROW][EQCLASS_WHITESPACE] = LS_RARROW_TERMINAL,
  [LS_SEEN_RARROW][EQCLASS_NEWLINE]    = LS_RARROW_TERMINAL,
  [LS_SEEN_RARROW][EQCLASS_LETTER]     = LS_RARROW_TERMINAL,
  [LS_SEEN_RARROW][EQCLASS_NUMBER]     = LS_RARROW_TERMINAL,
  [LS_SEEN_RARROW][EQCLASS_EQUALS]     = LS_OPERATOR,
  [LS_SEEN_RARROW][EQCLASS_COLON]      = LS_OPERATOR,
  [LS_SEEN_RARROW][EQCLASS_MINUS]      = LS_OPERATOR,
  [LS_SEEN_RARROW][EQCLASS_DOT]        = LS_OPERATOR,
  [LS_SEEN_RARROW][EQCLASS_GT]         = LS_OPERATOR,
  [LS_SEEN_RARROW][EQCLASS_OPERATOR]   = LS_OPERATOR,
  [LS_SEEN_IMPURE][EQCLASS_OTHER]      = LS_IMPURE_TERMINAL,
  [LS_SEEN_IMPURE][EQCLASS_WHITESPACE] = LS_IMPURE_TERMINAL,
  [LS_SEEN_IMPURE][EQCLASS_NEWLINE]    = LS_IMPURE_TERMINAL,
  [LS_SEEN_IMPURE][EQCLASS_LETTER]     = LS_IMPURE_TERMINAL,
  [LS_SEEN_IMPURE][EQCLASS_NUMBER]     = LS_IMPURE_TERMINAL,
  [LS_SEEN_IMPURE][EQCLASS_EQUALS]     = LS_OPERATOR,
  [LS_SEEN_IMPURE][EQCLASS_COLON]      = LS_OPERATOR,
  [LS_SEEN_IMPURE][EQCLASS_MINUS]      = LS_OPERATOR,
  [LS_SEEN_IMPURE][EQCLASS_DOT]        = LS_OPERATOR,
  [LS_SEEN_IMPURE][EQCLASS_GT]         = LS_OPERATOR,
  [LS_SEEN_IMPURE][EQCLASS_OPERATOR]   = LS_OPERATOR,
  [LS_SEEN_IMPURE][EQCLASS_TICK]       = LS_OPERATOR,
  [LS_SEEN_DOT_2][EQCLASS_OTHER]       = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT_2][EQCLASS_WHITESPACE]  = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT_2][EQCLASS_NEWLINE]     = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT_2][EQCLASS_LETTER]      = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT_2][EQCLASS_NUMBER]      = LS_OPERATOR_TERMINAL,
  [LS_SEEN_DOT_2][EQCLASS_EQUALS]      = LS_OPERATOR,
  [LS_SEEN_DOT_2][EQCLASS_COLON]       = LS_OPERATOR,
  [LS_SEEN_DOT_2][EQCLASS_MINUS]       = LS_OPERATOR,
  [LS_SEEN_DOT_2][EQCLASS_DOT]         = LS_SEEN_DOT_3,
  [LS_SEEN_DOT_2][EQCLASS_GT]          = LS_OPERATOR,
  [LS_SEEN_DOT_2][EQCLASS_OPERATOR]    = LS_OPERATOR,
  [LS_SEEN_DOT_3][EQCLASS_OTHER]       = LS_ELLIPSIS_TERMINAL,
  [LS_SEEN_DOT_3][EQCLASS_WHITESPACE]  = LS_ELLIPSIS_TERMINAL,
  [LS_SEEN_DOT_3][EQCLASS_NEWLINE]     = LS_ELLIPSIS_TERMINAL,
  [LS_SEEN_DOT_3][EQCLASS_LETTER]      = LS_ELLIPSIS_TERMINAL,
  [LS_SEEN_DOT_3][EQCLASS_NUMBER]      = LS_ELLIPSIS_TERMINAL,
  [LS_SEEN_DOT_3][EQCLASS_EQUALS]      = LS_OPERATOR,
  [LS_SEEN_DOT_3][EQCLASS_COLON]       = LS_OPERATOR,
  [LS_SEEN_DOT_3][EQCLASS_MINUS]       = LS_OPERATOR,
  [LS_SEEN_DOT_3][EQCLASS_DOT]         = LS_OPERATOR,
  [LS_SEEN_DOT_3][EQCLASS_GT]          = LS_OPERATOR,
  [LS_SEEN_DOT_3][EQCLASS_OPERATOR]    = LS_OPERATOR,
  [LS_OPERATOR][EQCLASS_OTHER]         = LS_OPERATOR_TERMINAL,
  [LS_OPERATOR][EQCLASS_WHITESPACE]    = LS_OPERATOR_TERMINAL,
  [LS_OPERATOR][EQCLASS_NEWLINE]       = LS_OPERATOR_TERMINAL,
  [LS_OPERATOR][EQCLASS_LETTER]        = LS_OPERATOR_TERMINAL,
  [LS_OPERATOR][EQCLASS_NUMBER]        = LS_OPERATOR_TERMINAL,
  [LS_OPERATOR][EQCLASS_EQUALS]        = LS_OPERATOR,
  [LS_OPERATOR][EQCLASS_COLON]         = LS_OPERATOR,
  [LS_OPERATOR][EQCLASS_MINUS]         = LS_OPERATOR,
  [LS_OPERATOR][EQCLASS_DOT]           = LS_OPERATOR,
  [LS_OPERATOR][EQCLASS_GT]            = LS_OPERATOR,
  [LS_OPERATOR][EQCLASS_OPERATOR]      = LS_OPERATOR//,
  /* */
};

/* Stateful increments for properly incrementing the current char. */

static const char
stateful_char_increments[LS_TERMINALS_END] = {
  [LS_START]             = 1,
  [LS_WHITESPACE]        = 1,
  [LS_NEWLINE]           = 1,
  [LS_IDENT]             = 1,
  [LS_NUMBER]            = 1,
  [LS_STRING]            = 1,
  [LS_CHAR]              = 1,
  [LS_SEEN_EQUALS]       = 1,
  [LS_SEEN_COLON]        = 1,
  [LS_SEEN_MINUS]        = 1,
  [LS_SEEN_RARROW]       = 1,
  [LS_SEEN_IMPURE]       = 1,
  [LS_SEEN_DOT]          = 1,
  [LS_SEEN_DOT_2]        = 1,
  [LS_SEEN_DOT_3]        = 1,
  [LS_OPERATOR]          = 1,
  [LS_SEEN_TICK]         = 1,
  [LS_OTHER_TERMINAL]    = 1,
  [LS_NEWLINE_TERMINAL]  = 0,
  [LS_IDENT_TERMINAL]    = 0,
  [LS_NUMBER_TERMINAL]   = 0,
  [LS_EQUALS_TERMINAL]   = 0,
  [LS_COLON_TERMINAL]    = 0,
  [LS_RARROW_TERMINAL]   = 0,
  [LS_IMPURE_TERMINAL]   = 0,
  [LS_ELLIPSIS_TERMINAL] = 0,
  [LS_OPERATOR_TERMINAL] = 0
};

/* Stateful increments prevent incrementing on terminal states and
   whitespace. */

static const char
stateful_slice_increments[LS_TERMINALS_END] = {
  [LS_START]             = 0,
  [LS_WHITESPACE]        = 0,
  [LS_NEWLINE]           = 1,
  [LS_IDENT]             = 1,
  [LS_NUMBER]            = 1,
  [LS_STRING]            = 1,
  [LS_CHAR]              = 1,
  [LS_SEEN_EQUALS]       = 1,
  [LS_SEEN_COLON]        = 1,
  [LS_SEEN_MINUS]        = 1,
  [LS_SEEN_RARROW]       = 1,
  [LS_SEEN_IMPURE]       = 1,
  [LS_SEEN_DOT]          = 1,
  [LS_SEEN_DOT_2]        = 1,
  [LS_SEEN_DOT_3]        = 1,
  [LS_OPERATOR]          = 1,
  [LS_SEEN_TICK]         = 1,
  [LS_OTHER_TERMINAL]    = 1,
  [LS_NEWLINE_TERMINAL]  = 0,
  [LS_IDENT_TERMINAL]    = 0,
  [LS_NUMBER_TERMINAL]   = 0,
  [LS_EQUALS_TERMINAL]   = 0,
  [LS_COLON_TERMINAL]    = 0,
  [LS_RARROW_TERMINAL]   = 0,
  [LS_IMPURE_TERMINAL]   = 0,
  [LS_ELLIPSIS_TERMINAL] = 0,
  [LS_OPERATOR_TERMINAL] = 0
};
